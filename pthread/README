Actividad 1 - introducción
	
	Archivo: thread_101_1.c
	
	Observación: El archivo original tiene dos variables x  y y que se incrementan de 0 hasta 100, la variable x es incrementada por un proceso enviado a un hilo, mientras la variable y se sigue ejecutando en el proceso principal, al final hay un join, el cual espera a la terminación del hilo en ejecución para imprimir finalmente las dos variables.

	Remover las instrucciones del join y explicar:
	
	Como es el comportamiento del programa?
		R/ Al remover todo el bloque relacionado con la instrucción join phtread_join, resultado es variable, no se muestra el incremento de la variable x, sino que únicamente se muestra la variable y incrementada.
	
	Si es inesperado, como se explica?
		R/ Al no esperar a que el hilo finalice, la impresión solo muestra el incremento de la variable y que se realizó en el proceso principal, y no se actualiza a tiempo el valor de la variable x, la cual está siendo incrementada por un hilo en ejecución.
	
	Correr el programa varias veces y explicar:
	
	Todas las ejecuciones son iguales?
		R/ Ejecutando el programa varias veces, se observa que los resultados de las ejecuciones varía de una a otra, en la mayoría se observa el resultado descrito en la primera parte, donde solo a variable y se ve incrementada. Pero en algunas se alcanza a evidenciar la ejecución original donde las dos variables son incrementadas, o en otras se alcanza a ver el mensaje de “x increment finished” aunque no se vea la variable incrementada o solo se ve la variable incrementada y el mensaje no alcanza a salir. 
	Esta variación se debe a él tiempo que tarda el proceso original y si este tiempo es suficiente a que el hilo termine o no. El resultado es muy variable, se convierte en no determinístico.

Actividad 2

	Archivo: 3s-00.c

	Observación: El archivo original contiene un programa secuencial, el cual cuenta el número de veces que el número 3 aparece en un vector. 
	La memoria del equipo local en el cual se corre el programa es de 4Gb en vez de 8Gb, por esta razón al correr el archivo original se produce un error:

	Running 3s-00*** 3s-00 ***
	Initializing vector... Allocation memory failed!

	Para efectos de desarrollo del taller se disminuye la longitud del vector de 1000000000 a 100000000 y se sigue con la ejecución.
	Obteniendo un tiempo de 
	
	Elapsed time 379.159973
	
	El tiempo se está contabilizando en dos variables t1 y t2, en este momento se muestra la diferencia de tiempo entre la una y la otra, t1 contiene el tiempo del reloj después de inicializar el vector y t2 el tiempo posterior.
	
	Añadir las sentencias adecuadas para determinar la cantidad de tiempo que el programa pasa durante:
	
	Vector de inicialización.
	
		R/ Se creará una nueva variable t0 que tomará el tiempo del reloj antes de empezar a inicializar el vector, posteriormente se restará a la variable t3, la cual toma el tiempo del reloj posterior a la inicialización, para capturar el tiempo que se tarda en este proceso.
	
	Contar el número de 3s en un vector dado.
	
		R/ Se retoma las variables t1 y t2 que el programa tiene en su versión original y se muestra su diferencia como el tiempo transcurrido durante esta ejecución.
	
	Resultados obtenidos
	
	Running 3s-00*** 3s-00 ***
	Initializing vector... Vector initialized!
	Count by threads 4999073
	Double check 4999073
	[[3s-00] Elapsed time 376.639984
	[[3s-00] Initialize vector time 1371.609009
	[[3s-00] Count 3s time 376.639984

Actividad 3

	Archivo: 3s-01.c

	Observación: El archivo original contiene un programa paralelo con hilos, los hilos son utilizados para contar el número de veces que el número 3 aparece en un vector. 
	La memoria del equipo local en el cual se corre el programa es de 4Gb en vez de 8Gb, por esta razón al correr el archivo original se produce un error:
	Initializing vector... Allocation memory failed!
	Para efectos de desarrollo del taller se disminuye la longitud del vector de 1000000000 a 100000000 y se sigue con la ejecución.
	Obteniendo un tiempo de 
	[[3s-01] Elapsed time 0.321000
	Igual que el archivo anterior el tiempo se está contabilizando en dos variables t1 y t2, en este momento se muestra la diferencia de tiempo entre la una y la otra, t1 contiene el tiempo del reloj después de inicializar el vector y t2 el tiempo posterior.
	
	Incluya las frases de código utilizadas para estimar la cantidad de tiempo necesario para cada hilo para contar el número de 3s en un vector. Responda las preguntas:
	¿Cuántos elementos del vector grande tiene?.
		R/ El nuevo vector tiene como tamaño máximo la cantidad de hilos 8, pero en ejecución solo se muestran 2 hilos.
	El programa es la correcta? ¿Qué hay de malo en ello? ¿Qué valor el programa se pone y lo que es el valor esperado?.
		R/ La programación falla en el punto en que no espera a los hilos no está efectuando el join que unirá la información de todos, al no esperar la terminación de los hilos no se puede confiar en los valores entregados. A pesar de todo el tiempo se ve reducido con respecto al programa anterior.
	
	Resultados obtenidos
	[3s-01] Using 8 threads
	*** 3s-01 ***
	Initializing vector... Vector initialized!
	[3s-01] Thread created!
		Thread [0] starts [0] length [12500000]
	[3s-01] Thread created!
		Thread [1] starts [12500000] length [12500000]
	[3s-01] Thread created!
	[3s-01] Thread created!
	[3s-01] Thread created!
	[3s-01] Thread created!
	[3s-01] Thread created!
	[3s-01] Thread created!
	[3s-01] Count by threads 1413
	[3s-01] Double check 4995601
	
Actividad 4

	Archivo: 3s-02.c
	
	Observación: Este archivo es de programación paralela, es más preciso que el anterior pero no es exacto.
	Incluya las frases de código utilizadas para estimar la cantidad de tiempo necesario para cada hilo para contar el número de 3s en un vector. Responda las preguntas:
	
	¿Que está mal esta vez?.
		R/ Los hilos acceden de forma simultánea y por así decirlo desordenada, al recurso que es la variable count, por tal razón al unificar los resultados estos no coinciden con la variable de chequeo.
	
	Resultados obtenidos
	*** 3s-02 ***
	Initializing vector... Vector initialized!
	[3s-02] Thread created!
		Thread [0] starts [0] length [12500000]
	[3s-02] Thread created!
		Thread [1] starts [12500000] length [12500000]
	[3s-02] Thread created!
	[3s-02] Thread created!
	[3s-02] Thread created!
	[3s-02] Thread created!
	[3s-02] Thread created!
	[3s-02] Thread created!
		Thread [3] starts [37500000] length [12500000]
		Thread [4] starts [50000000] length [12500000]
		Thread [5] starts [62500000] length [12500000]
		Thread [2] starts [25000000] length [12500000]
		Thread [6] starts [75000000] length [12500000]
		Thread [7] starts [87500000] length [12500000]
		[Thread [4]] Elapsed time 312.453003
		[Thread [3]] Elapsed time 368.770996
		[Thread [2]] Elapsed time 527.112000
		[Thread [1]] Elapsed time 597.980042
		[Thread [0]] Elapsed time 649.909973
		Thread [0] exited with status [37]
		Thread [1] exited with status [37]
		Thread [2] exited with status [37]
		Thread [3] exited with status [37]
		Thread [4] exited with status [37]
		[Thread [5]] Elapsed time 617.174011
		Thread [5] exited with status [37]
		[Thread [7]] Elapsed time 610.984985
		[Thread [6]] Elapsed time 615.299011
		Thread [6] exited with status [37]
		Thread [7] exited with status [37]
		[3s-02] Count by threads 2438562
		[3s-02] Double check 5001561
		[[3s-02] Elapsed time 659.923950

		[[3s-01] Elapsed time 0.321000

Actividad 5
	Archivo: 3s-03.c
	
	Observación: Esta vez el programa hace  lo que tiene que hacer.
	Incluya las frases de código utilizadas para estimar la cantidad de tiempo necesario para cada hilo para contar el número de 3s en un vector. Responda las preguntas:
	
	a. ¿Porque funciona esta vez?.
		R/ En esta ocasión se incluyen las instrucciones de acceso sincronizado al recurso de bloque pthread_mutex_lock(&mutex); y de desbloqueo pthread_mutex_unlock(&mutex); dentro de cada hilo . Y las instrucciones de pthread_mutex_init(&mutex,NULL); para inicializar y pthread_mutex_destroy(&mutex); para finalizar.
	
	b. ¿Cuánto tiempo llevó a obtener el recuento total de 3s en todo el vector?.
	R/ En esta ocasión el tiempo máximo de los hilos que corresponde casi al tiempo total de obtener el recuento en todo el vector es de:
	[[3s-03] Threads max time 2002.682983 
	
	[[3s-03] Elapsed time 2004.285156

	Resultados obtenidos
	[3s-03] Using 8 threads
	*** 3s-03 ***
	Initializing vector... Vector initialized!
	[3s-03] Thread created!
		Thread [0] starts [0] length [12500000]
	[3s-03] Thread created!
		Thread [1] starts [12500000] length [12500000]
	[3s-03] Thread created!
		Thread [2] starts [25000000] length [12500000]
	[3s-03] Thread created!
		Thread [3] starts [37500000] length [12500000]
	[3s-03] Thread created!
		Thread [4] starts [50000000] length [12500000]
	[3s-03] Thread created!
		Thread [5] starts [62500000] length [12500000]
	[3s-03] Thread created!
		Thread [6] starts [75000000] length [12500000]
	[3s-03] Thread created!
		Thread [7] starts [87500000] length [12500000]
	Thread [0] exited with status [0]
	Thread [1] exited with status [1]
	Thread [2] exited with status [2]
	Thread [3] exited with status [3]
	Thread [4] exited with status [4]
	Thread [5] exited with status [5]
	Thread [6] exited with status [6]
	Thread [7] exited with status [7]
	[3s-03] Count by threads 4996600
	[3s-03] Double check 4996600
	[[3s-03] Elapsed time 2004.285156
	[Thread [0]] Elapsed time 249.697998
	[Thread [1]] Elapsed time 496.796021
	[Thread [2]] Elapsed time 745.978027
	[Thread [3]] Elapsed time 994.485046
	[Thread [4]] Elapsed time 1242.010010
	[Thread [5]] Elapsed time 1491.075073
	[Thread [6]] Elapsed time 1740.602051
	[Thread [7]] Elapsed time 2002.682983
	[[3s-03] Threads total time 8963.327148 
	[[3s-03] Threads max time 2002.682983 
